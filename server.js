// server.js - ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Node.js ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á
const express = require('express');
const fs = require('fs').promises; // ‡πÉ‡∏ä‡πâ file system ‡πÅ‡∏ö‡∏ö promises (async/await)
const path = require('path');

const app = express();
const port = 3000; // ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏£‡∏±‡∏ô (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á)
const ITEMS_FILE_PATH = path.join(__dirname, 'items.json'); // ‡∏û‡∏≤‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå items.json

// Middleware ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ Express ‡∏≠‡πà‡∏≤‡∏ô JSON ‡∏à‡∏≤‡∏Å request body ‡πÑ‡∏î‡πâ
app.use(express.json());
// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå static (html, css, js ‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
app.use(express.static(__dirname));

// --- API Endpoints ---

// GET /api/items - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å items.json
app.get('/api/items', async (req, res) => {
    console.log(`[${new Date().toLocaleTimeString()}] GET /api/items - Request received`);
    try {
        const data = await fs.readFile(ITEMS_FILE_PATH, 'utf8');
        const items = JSON.parse(data);
        console.log(`[${new Date().toLocaleTimeString()}] GET /api/items - Sending ${items.length} items.`);
        res.json(items); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô JSON
    } catch (error) {
        console.error(`[${new Date().toLocaleTimeString()}] ERROR reading ${ITEMS_FILE_PATH}:`, error);
        // ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏™‡πà‡∏á array ‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô + ‡πÇ‡∏Ñ‡πâ‡∏î 500
        res.status(500).json([]);
    }
});

// POST /api/items - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á items.json
app.post('/api/items', async (req, res) => {
    const newItem = req.body.newItem?.trim(); // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å request body
    console.log(`[<span class="math-inline">\{new Date\(\)\.toLocaleTimeString\(\)\}\] POST /api/items \- Received request to add\: "</span>{newItem}"`);

    if (!newItem) {
        console.log(`[${new Date().toLocaleTimeString()}] POST /api/items - Bad request: No newItem provided.`);
        return res.status(400).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ß‡πà‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô' });
    }

    try {
        let items = [];
        try {
            const data = await fs.readFile(ITEMS_FILE_PATH, 'utf8');
            items = JSON.parse(data);
            if (!Array.isArray(items)) {
                console.warn(`[${new Date().toLocaleTimeString()}] WARNING: ${ITEMS_FILE_PATH} did not contain a valid JSON array. Resetting.`);
                items = []; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà array ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            }
        } catch (readError) {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤) ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ array ‡∏ß‡πà‡∏≤‡∏á
            if (readError.code === 'ENOENT') {
                 console.log(`[${new Date().toLocaleTimeString()}] INFO: ${ITEMS_FILE_PATH} not found. Will create it.`);
            } else {
                console.warn(`[${new Date().toLocaleTimeString()}] WARNING: Error reading ${ITEMS_FILE_PATH} before write:`, readError.message);
            }
            items = [];
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å/‡πÉ‡∏´‡∏ç‡πà)
        const itemExists = items.some(existingItem => existingItem.toLowerCase() === newItem.toLowerCase());

        if (itemExists) {
            console.log(`[<span class="math-inline">\{new Date\(\)\.toLocaleTimeString\(\)\}\] POST /api/items \- Item "</span>{newItem}" already exists.`);
            return res.status(200).json({ success: true, message: '‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥)', added: false });
        } else {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
            items.push(newItem);
            items.sort((a, b) => a.localeCompare(b, 'th')); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏Å-‡∏Æ

            // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå items.json
            await fs.writeFile(ITEMS_FILE_PATH, JSON.stringify(items, null, 2), 'utf8'); // ‡πÉ‡∏™‡πà null, 2 ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡πÜ
            console.log(`[<span class="math-inline">\{new Date\(\)\.toLocaleTimeString\(\)\}\] POST /api/items \- Successfully added "</span>{newItem}" and saved to ${ITEMS_FILE_PATH}. Total: ${items.length}`);
            return res.status(200).json({ success: true, message: `‡πÄ‡∏û‡∏¥‡πà‡∏° "${newItem}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`, added: true });
        }

    } catch (error) {
        console.error(`[${new Date().toLocaleTimeString()}] ERROR processing POST /api/items:`, error);
        return res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡πÄ‡∏ã‡∏ü‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô' });
    }
});

// --- ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å ---
// ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå index.html ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ root path
// Express.static ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ index.html ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå

// --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ---
app.listen(port, () => {
    console.log(`\nüöÄ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏∏‡∏¢!`);
    console.log(`   ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:${port}`);
    console.log(`   (‡∏Å‡∏î CTRL + C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå)`);
});